//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MemoryGame.MemoryGameService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MemoryGameService.IAccessibilityService")]
    public interface IAccessibilityService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessibilityService/HasAccessRights", ReplyAction="http://tempuri.org/IAccessibilityService/HasAccessRightsResponse")]
        bool HasAccessRights(MemoryGame.MemoryGameService.DataTransferObjects.PlayerCredentialsDTO playerCredentialsDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessibilityService/HasAccessRights", ReplyAction="http://tempuri.org/IAccessibilityService/HasAccessRightsResponse")]
        System.Threading.Tasks.Task<bool> HasAccessRightsAsync(MemoryGame.MemoryGameService.DataTransferObjects.PlayerCredentialsDTO playerCredentialsDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessibilityService/IsVerified", ReplyAction="http://tempuri.org/IAccessibilityService/IsVerifiedResponse")]
        bool IsVerified(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessibilityService/IsVerified", ReplyAction="http://tempuri.org/IAccessibilityService/IsVerifiedResponse")]
        System.Threading.Tasks.Task<bool> IsVerifiedAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessibilityService/ItsRegistered", ReplyAction="http://tempuri.org/IAccessibilityService/ItsRegisteredResponse")]
        bool ItsRegistered(string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessibilityService/ItsRegistered", ReplyAction="http://tempuri.org/IAccessibilityService/ItsRegisteredResponse")]
        System.Threading.Tasks.Task<bool> ItsRegisteredAsync(string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessibilityService/GetUserEmailAddress", ReplyAction="http://tempuri.org/IAccessibilityService/GetUserEmailAddressResponse")]
        string GetUserEmailAddress(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessibilityService/GetUserEmailAddress", ReplyAction="http://tempuri.org/IAccessibilityService/GetUserEmailAddressResponse")]
        System.Threading.Tasks.Task<string> GetUserEmailAddressAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessibilityService/GetUsername", ReplyAction="http://tempuri.org/IAccessibilityService/GetUsernameResponse")]
        string GetUsername(string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessibilityService/GetUsername", ReplyAction="http://tempuri.org/IAccessibilityService/GetUsernameResponse")]
        System.Threading.Tasks.Task<string> GetUsernameAsync(string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessibilityService/GetPlayerCredentials", ReplyAction="http://tempuri.org/IAccessibilityService/GetPlayerCredentialsResponse")]
        MemoryGame.MemoryGameService.DataTransferObjects.PlayerCredentialsDTO GetPlayerCredentials(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessibilityService/GetPlayerCredentials", ReplyAction="http://tempuri.org/IAccessibilityService/GetPlayerCredentialsResponse")]
        System.Threading.Tasks.Task<MemoryGame.MemoryGameService.DataTransferObjects.PlayerCredentialsDTO> GetPlayerCredentialsAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccessibilityServiceChannel : MemoryGame.MemoryGameService.IAccessibilityService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccessibilityServiceClient : System.ServiceModel.ClientBase<MemoryGame.MemoryGameService.IAccessibilityService>, MemoryGame.MemoryGameService.IAccessibilityService {
        
        public AccessibilityServiceClient() {
        }
        
        public AccessibilityServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccessibilityServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccessibilityServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccessibilityServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool HasAccessRights(MemoryGame.MemoryGameService.DataTransferObjects.PlayerCredentialsDTO playerCredentialsDTO) {
            return base.Channel.HasAccessRights(playerCredentialsDTO);
        }
        
        public System.Threading.Tasks.Task<bool> HasAccessRightsAsync(MemoryGame.MemoryGameService.DataTransferObjects.PlayerCredentialsDTO playerCredentialsDTO) {
            return base.Channel.HasAccessRightsAsync(playerCredentialsDTO);
        }
        
        public bool IsVerified(string username) {
            return base.Channel.IsVerified(username);
        }
        
        public System.Threading.Tasks.Task<bool> IsVerifiedAsync(string username) {
            return base.Channel.IsVerifiedAsync(username);
        }
        
        public bool ItsRegistered(string emailAddress) {
            return base.Channel.ItsRegistered(emailAddress);
        }
        
        public System.Threading.Tasks.Task<bool> ItsRegisteredAsync(string emailAddress) {
            return base.Channel.ItsRegisteredAsync(emailAddress);
        }
        
        public string GetUserEmailAddress(string username) {
            return base.Channel.GetUserEmailAddress(username);
        }
        
        public System.Threading.Tasks.Task<string> GetUserEmailAddressAsync(string username) {
            return base.Channel.GetUserEmailAddressAsync(username);
        }
        
        public string GetUsername(string emailAddress) {
            return base.Channel.GetUsername(emailAddress);
        }
        
        public System.Threading.Tasks.Task<string> GetUsernameAsync(string emailAddress) {
            return base.Channel.GetUsernameAsync(emailAddress);
        }
        
        public MemoryGame.MemoryGameService.DataTransferObjects.PlayerCredentialsDTO GetPlayerCredentials(string username) {
            return base.Channel.GetPlayerCredentials(username);
        }
        
        public System.Threading.Tasks.Task<MemoryGame.MemoryGameService.DataTransferObjects.PlayerCredentialsDTO> GetPlayerCredentialsAsync(string username) {
            return base.Channel.GetPlayerCredentialsAsync(username);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MemoryGameService.ICardDeckRetrieverService")]
    public interface ICardDeckRetrieverService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardDeckRetrieverService/GetCardDeckAndCards", ReplyAction="http://tempuri.org/ICardDeckRetrieverService/GetCardDeckAndCardsResponse")]
        MemoryGame.MemoryGameService.DataTransferObjects.CardDeckDTO GetCardDeckAndCards(int cardDeckId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardDeckRetrieverService/GetCardDeckAndCards", ReplyAction="http://tempuri.org/ICardDeckRetrieverService/GetCardDeckAndCardsResponse")]
        System.Threading.Tasks.Task<MemoryGame.MemoryGameService.DataTransferObjects.CardDeckDTO> GetCardDeckAndCardsAsync(int cardDeckId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICardDeckRetrieverServiceChannel : MemoryGame.MemoryGameService.ICardDeckRetrieverService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CardDeckRetrieverServiceClient : System.ServiceModel.ClientBase<MemoryGame.MemoryGameService.ICardDeckRetrieverService>, MemoryGame.MemoryGameService.ICardDeckRetrieverService {
        
        public CardDeckRetrieverServiceClient() {
        }
        
        public CardDeckRetrieverServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CardDeckRetrieverServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CardDeckRetrieverServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CardDeckRetrieverServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MemoryGame.MemoryGameService.DataTransferObjects.CardDeckDTO GetCardDeckAndCards(int cardDeckId) {
            return base.Channel.GetCardDeckAndCards(cardDeckId);
        }
        
        public System.Threading.Tasks.Task<MemoryGame.MemoryGameService.DataTransferObjects.CardDeckDTO> GetCardDeckAndCardsAsync(int cardDeckId) {
            return base.Channel.GetCardDeckAndCardsAsync(cardDeckId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MemoryGameService.IAccountModifiabilityService")]
    public interface IAccountModifiabilityService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountModifiabilityService/SetNewPassword", ReplyAction="http://tempuri.org/IAccountModifiabilityService/SetNewPasswordResponse")]
        bool SetNewPassword(MemoryGame.MemoryGameService.DataTransferObjects.PlayerCredentialsDTO playerCredentialsDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountModifiabilityService/SetNewPassword", ReplyAction="http://tempuri.org/IAccountModifiabilityService/SetNewPasswordResponse")]
        System.Threading.Tasks.Task<bool> SetNewPasswordAsync(MemoryGame.MemoryGameService.DataTransferObjects.PlayerCredentialsDTO playerCredentialsDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountModifiabilityService/ChangeUsername", ReplyAction="http://tempuri.org/IAccountModifiabilityService/ChangeUsernameResponse")]
        bool ChangeUsername(MemoryGame.MemoryGameService.DataTransferObjects.PlayerCredentialsDTO playerCredentialsDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountModifiabilityService/ChangeUsername", ReplyAction="http://tempuri.org/IAccountModifiabilityService/ChangeUsernameResponse")]
        System.Threading.Tasks.Task<bool> ChangeUsernameAsync(MemoryGame.MemoryGameService.DataTransferObjects.PlayerCredentialsDTO playerCredentialsDTO);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountModifiabilityServiceChannel : MemoryGame.MemoryGameService.IAccountModifiabilityService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountModifiabilityServiceClient : System.ServiceModel.ClientBase<MemoryGame.MemoryGameService.IAccountModifiabilityService>, MemoryGame.MemoryGameService.IAccountModifiabilityService {
        
        public AccountModifiabilityServiceClient() {
        }
        
        public AccountModifiabilityServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccountModifiabilityServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountModifiabilityServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountModifiabilityServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool SetNewPassword(MemoryGame.MemoryGameService.DataTransferObjects.PlayerCredentialsDTO playerCredentialsDTO) {
            return base.Channel.SetNewPassword(playerCredentialsDTO);
        }
        
        public System.Threading.Tasks.Task<bool> SetNewPasswordAsync(MemoryGame.MemoryGameService.DataTransferObjects.PlayerCredentialsDTO playerCredentialsDTO) {
            return base.Channel.SetNewPasswordAsync(playerCredentialsDTO);
        }
        
        public bool ChangeUsername(MemoryGame.MemoryGameService.DataTransferObjects.PlayerCredentialsDTO playerCredentialsDTO) {
            return base.Channel.ChangeUsername(playerCredentialsDTO);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeUsernameAsync(MemoryGame.MemoryGameService.DataTransferObjects.PlayerCredentialsDTO playerCredentialsDTO) {
            return base.Channel.ChangeUsernameAsync(playerCredentialsDTO);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MemoryGameService.IAccountVerificationService")]
    public interface IAccountVerificationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountVerificationService/SetAccountAsVerified", ReplyAction="http://tempuri.org/IAccountVerificationService/SetAccountAsVerifiedResponse")]
        bool SetAccountAsVerified(string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountVerificationService/SetAccountAsVerified", ReplyAction="http://tempuri.org/IAccountVerificationService/SetAccountAsVerifiedResponse")]
        System.Threading.Tasks.Task<bool> SetAccountAsVerifiedAsync(string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountVerificationService/AssignNewVerificationToken", ReplyAction="http://tempuri.org/IAccountVerificationService/AssignNewVerificationTokenResponse" +
            "")]
        bool AssignNewVerificationToken(string emailAddress, string verificationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountVerificationService/AssignNewVerificationToken", ReplyAction="http://tempuri.org/IAccountVerificationService/AssignNewVerificationTokenResponse" +
            "")]
        System.Threading.Tasks.Task<bool> AssignNewVerificationTokenAsync(string emailAddress, string verificationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountVerificationService/VerifyToken", ReplyAction="http://tempuri.org/IAccountVerificationService/VerifyTokenResponse")]
        bool VerifyToken(string emailAddress, string verificationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountVerificationService/VerifyToken", ReplyAction="http://tempuri.org/IAccountVerificationService/VerifyTokenResponse")]
        System.Threading.Tasks.Task<bool> VerifyTokenAsync(string emailAddress, string verificationToken);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountVerificationServiceChannel : MemoryGame.MemoryGameService.IAccountVerificationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountVerificationServiceClient : System.ServiceModel.ClientBase<MemoryGame.MemoryGameService.IAccountVerificationService>, MemoryGame.MemoryGameService.IAccountVerificationService {
        
        public AccountVerificationServiceClient() {
        }
        
        public AccountVerificationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccountVerificationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountVerificationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountVerificationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool SetAccountAsVerified(string emailAddress) {
            return base.Channel.SetAccountAsVerified(emailAddress);
        }
        
        public System.Threading.Tasks.Task<bool> SetAccountAsVerifiedAsync(string emailAddress) {
            return base.Channel.SetAccountAsVerifiedAsync(emailAddress);
        }
        
        public bool AssignNewVerificationToken(string emailAddress, string verificationToken) {
            return base.Channel.AssignNewVerificationToken(emailAddress, verificationToken);
        }
        
        public System.Threading.Tasks.Task<bool> AssignNewVerificationTokenAsync(string emailAddress, string verificationToken) {
            return base.Channel.AssignNewVerificationTokenAsync(emailAddress, verificationToken);
        }
        
        public bool VerifyToken(string emailAddress, string verificationToken) {
            return base.Channel.VerifyToken(emailAddress, verificationToken);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyTokenAsync(string emailAddress, string verificationToken) {
            return base.Channel.VerifyTokenAsync(emailAddress, verificationToken);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MemoryGameService.ICardUncoveringService", CallbackContract=typeof(MemoryGame.MemoryGameService.ICardUncoveringServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ICardUncoveringService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardUncoveringService/SubscribeToCardUncoveringService", ReplyAction="http://tempuri.org/ICardUncoveringService/SubscribeToCardUncoveringServiceRespons" +
            "e")]
        void SubscribeToCardUncoveringService();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardUncoveringService/SubscribeToCardUncoveringService", ReplyAction="http://tempuri.org/ICardUncoveringService/SubscribeToCardUncoveringServiceRespons" +
            "e")]
        System.Threading.Tasks.Task SubscribeToCardUncoveringServiceAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, Action="http://tempuri.org/ICardUncoveringService/UnsubscribeFromCardUncoveringService", ReplyAction="http://tempuri.org/ICardUncoveringService/UnsubscribeFromCardUncoveringServiceRes" +
            "ponse")]
        void UnsubscribeFromCardUncoveringService();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, Action="http://tempuri.org/ICardUncoveringService/UnsubscribeFromCardUncoveringService", ReplyAction="http://tempuri.org/ICardUncoveringService/UnsubscribeFromCardUncoveringServiceRes" +
            "ponse")]
        System.Threading.Tasks.Task UnsubscribeFromCardUncoveringServiceAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICardUncoveringService/NotifyCardWasUncovered")]
        void NotifyCardWasUncovered(int cardIndex);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICardUncoveringService/NotifyCardWasUncovered")]
        System.Threading.Tasks.Task NotifyCardWasUncoveredAsync(int cardIndex);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICardUncoveringServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICardUncoveringService/UncoverCard")]
        void UncoverCard(int cardIndex);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICardUncoveringServiceChannel : MemoryGame.MemoryGameService.ICardUncoveringService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CardUncoveringServiceClient : System.ServiceModel.DuplexClientBase<MemoryGame.MemoryGameService.ICardUncoveringService>, MemoryGame.MemoryGameService.ICardUncoveringService {
        
        public CardUncoveringServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CardUncoveringServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CardUncoveringServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CardUncoveringServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CardUncoveringServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SubscribeToCardUncoveringService() {
            base.Channel.SubscribeToCardUncoveringService();
        }
        
        public System.Threading.Tasks.Task SubscribeToCardUncoveringServiceAsync() {
            return base.Channel.SubscribeToCardUncoveringServiceAsync();
        }
        
        public void UnsubscribeFromCardUncoveringService() {
            base.Channel.UnsubscribeFromCardUncoveringService();
        }
        
        public System.Threading.Tasks.Task UnsubscribeFromCardUncoveringServiceAsync() {
            return base.Channel.UnsubscribeFromCardUncoveringServiceAsync();
        }
        
        public void NotifyCardWasUncovered(int cardIndex) {
            base.Channel.NotifyCardWasUncovered(cardIndex);
        }
        
        public System.Threading.Tasks.Task NotifyCardWasUncoveredAsync(int cardIndex) {
            return base.Channel.NotifyCardWasUncoveredAsync(cardIndex);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MemoryGameService.ICommunicationService", CallbackContract=typeof(MemoryGame.MemoryGameService.ICommunicationServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ICommunicationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommunicationService/SubscribeToCommunicationService", ReplyAction="http://tempuri.org/ICommunicationService/SubscribeToCommunicationServiceResponse")]
        void SubscribeToCommunicationService(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommunicationService/SubscribeToCommunicationService", ReplyAction="http://tempuri.org/ICommunicationService/SubscribeToCommunicationServiceResponse")]
        System.Threading.Tasks.Task SubscribeToCommunicationServiceAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, Action="http://tempuri.org/ICommunicationService/UnsubscribeFromCommunicationService", ReplyAction="http://tempuri.org/ICommunicationService/UnsubscribeFromCommunicationServiceRespo" +
            "nse")]
        void UnsubscribeFromCommunicationService();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, Action="http://tempuri.org/ICommunicationService/UnsubscribeFromCommunicationService", ReplyAction="http://tempuri.org/ICommunicationService/UnsubscribeFromCommunicationServiceRespo" +
            "nse")]
        System.Threading.Tasks.Task UnsubscribeFromCommunicationServiceAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICommunicationService/SendMessage")]
        void SendMessage(string sender, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICommunicationService/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string sender, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommunicationServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICommunicationService/ReciveMessage")]
        void ReciveMessage(string username, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICommunicationService/NotifyUserHasEnteredTheChat")]
        void NotifyUserHasEnteredTheChat(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommunicationServiceChannel : MemoryGame.MemoryGameService.ICommunicationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommunicationServiceClient : System.ServiceModel.DuplexClientBase<MemoryGame.MemoryGameService.ICommunicationService>, MemoryGame.MemoryGameService.ICommunicationService {
        
        public CommunicationServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CommunicationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CommunicationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CommunicationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CommunicationServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SubscribeToCommunicationService(string username) {
            base.Channel.SubscribeToCommunicationService(username);
        }
        
        public System.Threading.Tasks.Task SubscribeToCommunicationServiceAsync(string username) {
            return base.Channel.SubscribeToCommunicationServiceAsync(username);
        }
        
        public void UnsubscribeFromCommunicationService() {
            base.Channel.UnsubscribeFromCommunicationService();
        }
        
        public System.Threading.Tasks.Task UnsubscribeFromCommunicationServiceAsync() {
            return base.Channel.UnsubscribeFromCommunicationServiceAsync();
        }
        
        public void SendMessage(string sender, string message) {
            base.Channel.SendMessage(sender, message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string sender, string message) {
            return base.Channel.SendMessageAsync(sender, message);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MemoryGameService.ILobbyService", CallbackContract=typeof(MemoryGame.MemoryGameService.ILobbyServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ILobbyService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/JoinLobby")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.PlayerCredentialsDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.CardDeckDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.CardDto[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.CardDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.GameMatchDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.MatchLobby))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.GameMatchDto[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.PlayerMovementDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.CardPairDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.PlayerInMatchDto[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.PlayerInMatchDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.PlayerScoreDTO[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.PlayerScoreDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.PlayerDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        void JoinLobby(MemoryGame.MemoryGameService.DataTransferObjects.LobbyRequestDto lobbyRequestDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/JoinLobby")]
        System.Threading.Tasks.Task JoinLobbyAsync(MemoryGame.MemoryGameService.DataTransferObjects.LobbyRequestDto lobbyRequestDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/LeaveLobby")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.PlayerCredentialsDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.CardDeckDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.CardDto[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.CardDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.GameMatchDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.MatchLobby))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.GameMatchDto[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.PlayerMovementDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.CardPairDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.PlayerInMatchDto[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.PlayerInMatchDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.PlayerScoreDTO[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.PlayerScoreDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MemoryGame.MemoryGameService.DataTransferObjects.PlayerDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        void LeaveLobby(MemoryGame.MemoryGameService.DataTransferObjects.LobbyRequestDto lobbyRequestDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/LeaveLobby")]
        System.Threading.Tasks.Task LeaveLobbyAsync(MemoryGame.MemoryGameService.DataTransferObjects.LobbyRequestDto lobbyRequestDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/GetActivePlayersInLobby", ReplyAction="http://tempuri.org/ILobbyService/GetActivePlayersInLobbyResponse")]
        string[] GetActivePlayersInLobby(MemoryGame.MemoryGameService.DataTransferObjects.GameMatchDto gameMatchDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/GetActivePlayersInLobby", ReplyAction="http://tempuri.org/ILobbyService/GetActivePlayersInLobbyResponse")]
        System.Threading.Tasks.Task<string[]> GetActivePlayersInLobbyAsync(MemoryGame.MemoryGameService.DataTransferObjects.GameMatchDto gameMatchDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/StartGame")]
        void StartGame(MemoryGame.MemoryGameService.DataTransferObjects.GameMatchDto gameMatchDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/StartGame")]
        System.Threading.Tasks.Task StartGameAsync(MemoryGame.MemoryGameService.DataTransferObjects.GameMatchDto gameMatchDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/DeleteMatch")]
        void DeleteMatch(string matchHost);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/DeleteMatch")]
        System.Threading.Tasks.Task DeleteMatchAsync(string matchHost);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/NotifyNewPlayerEntered")]
        void NotifyNewPlayerEntered(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/NotifyPlayerLeft")]
        void NotifyPlayerLeft(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/TakePlayersToMatchView")]
        void TakePlayersToMatchView(string[] playersInMatch);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/TakePlayersOutOfLobby")]
        void TakePlayersOutOfLobby();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyServiceChannel : MemoryGame.MemoryGameService.ILobbyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyServiceClient : System.ServiceModel.DuplexClientBase<MemoryGame.MemoryGameService.ILobbyService>, MemoryGame.MemoryGameService.ILobbyService {
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void JoinLobby(MemoryGame.MemoryGameService.DataTransferObjects.LobbyRequestDto lobbyRequestDto) {
            base.Channel.JoinLobby(lobbyRequestDto);
        }
        
        public System.Threading.Tasks.Task JoinLobbyAsync(MemoryGame.MemoryGameService.DataTransferObjects.LobbyRequestDto lobbyRequestDto) {
            return base.Channel.JoinLobbyAsync(lobbyRequestDto);
        }
        
        public void LeaveLobby(MemoryGame.MemoryGameService.DataTransferObjects.LobbyRequestDto lobbyRequestDto) {
            base.Channel.LeaveLobby(lobbyRequestDto);
        }
        
        public System.Threading.Tasks.Task LeaveLobbyAsync(MemoryGame.MemoryGameService.DataTransferObjects.LobbyRequestDto lobbyRequestDto) {
            return base.Channel.LeaveLobbyAsync(lobbyRequestDto);
        }
        
        public string[] GetActivePlayersInLobby(MemoryGame.MemoryGameService.DataTransferObjects.GameMatchDto gameMatchDto) {
            return base.Channel.GetActivePlayersInLobby(gameMatchDto);
        }
        
        public System.Threading.Tasks.Task<string[]> GetActivePlayersInLobbyAsync(MemoryGame.MemoryGameService.DataTransferObjects.GameMatchDto gameMatchDto) {
            return base.Channel.GetActivePlayersInLobbyAsync(gameMatchDto);
        }
        
        public void StartGame(MemoryGame.MemoryGameService.DataTransferObjects.GameMatchDto gameMatchDto) {
            base.Channel.StartGame(gameMatchDto);
        }
        
        public System.Threading.Tasks.Task StartGameAsync(MemoryGame.MemoryGameService.DataTransferObjects.GameMatchDto gameMatchDto) {
            return base.Channel.StartGameAsync(gameMatchDto);
        }
        
        public void DeleteMatch(string matchHost) {
            base.Channel.DeleteMatch(matchHost);
        }
        
        public System.Threading.Tasks.Task DeleteMatchAsync(string matchHost) {
            return base.Channel.DeleteMatchAsync(matchHost);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MemoryGameService.IMailingService")]
    public interface IMailingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMailingService/SendVerificationToken", ReplyAction="http://tempuri.org/IMailingService/SendVerificationTokenResponse")]
        void SendVerificationToken(string name, string emailAddress, string verificationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMailingService/SendVerificationToken", ReplyAction="http://tempuri.org/IMailingService/SendVerificationTokenResponse")]
        System.Threading.Tasks.Task SendVerificationTokenAsync(string name, string emailAddress, string verificationToken);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMailingServiceChannel : MemoryGame.MemoryGameService.IMailingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MailingServiceClient : System.ServiceModel.ClientBase<MemoryGame.MemoryGameService.IMailingService>, MemoryGame.MemoryGameService.IMailingService {
        
        public MailingServiceClient() {
        }
        
        public MailingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MailingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MailingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MailingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SendVerificationToken(string name, string emailAddress, string verificationToken) {
            base.Channel.SendVerificationToken(name, emailAddress, verificationToken);
        }
        
        public System.Threading.Tasks.Task SendVerificationTokenAsync(string name, string emailAddress, string verificationToken) {
            return base.Channel.SendVerificationTokenAsync(name, emailAddress, verificationToken);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MemoryGameService.IMatchCreationService")]
    public interface IMatchCreationService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchCreationService/CreateNewMatch")]
        void CreateNewMatch(MemoryGame.MemoryGameService.DataTransferObjects.GameMatchDto gameMatchDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchCreationService/CreateNewMatch")]
        System.Threading.Tasks.Task CreateNewMatchAsync(MemoryGame.MemoryGameService.DataTransferObjects.GameMatchDto gameMatchDto);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchCreationServiceChannel : MemoryGame.MemoryGameService.IMatchCreationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MatchCreationServiceClient : System.ServiceModel.ClientBase<MemoryGame.MemoryGameService.IMatchCreationService>, MemoryGame.MemoryGameService.IMatchCreationService {
        
        public MatchCreationServiceClient() {
        }
        
        public MatchCreationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MatchCreationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MatchCreationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MatchCreationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CreateNewMatch(MemoryGame.MemoryGameService.DataTransferObjects.GameMatchDto gameMatchDto) {
            base.Channel.CreateNewMatch(gameMatchDto);
        }
        
        public System.Threading.Tasks.Task CreateNewMatchAsync(MemoryGame.MemoryGameService.DataTransferObjects.GameMatchDto gameMatchDto) {
            return base.Channel.CreateNewMatchAsync(gameMatchDto);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MemoryGameService.IMatchDiscoveryService")]
    public interface IMatchDiscoveryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchDiscoveryService/GetActiveMatches", ReplyAction="http://tempuri.org/IMatchDiscoveryService/GetActiveMatchesResponse")]
        MemoryGame.MemoryGameService.DataTransferObjects.GameMatchDto[] GetActiveMatches();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchDiscoveryService/GetActiveMatches", ReplyAction="http://tempuri.org/IMatchDiscoveryService/GetActiveMatchesResponse")]
        System.Threading.Tasks.Task<MemoryGame.MemoryGameService.DataTransferObjects.GameMatchDto[]> GetActiveMatchesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchDiscoveryService/CanJoin", ReplyAction="http://tempuri.org/IMatchDiscoveryService/CanJoinResponse")]
        bool CanJoin(string matchHost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchDiscoveryService/CanJoin", ReplyAction="http://tempuri.org/IMatchDiscoveryService/CanJoinResponse")]
        System.Threading.Tasks.Task<bool> CanJoinAsync(string matchHost);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchDiscoveryServiceChannel : MemoryGame.MemoryGameService.IMatchDiscoveryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MatchDiscoveryServiceClient : System.ServiceModel.ClientBase<MemoryGame.MemoryGameService.IMatchDiscoveryService>, MemoryGame.MemoryGameService.IMatchDiscoveryService {
        
        public MatchDiscoveryServiceClient() {
        }
        
        public MatchDiscoveryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MatchDiscoveryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MatchDiscoveryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MatchDiscoveryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MemoryGame.MemoryGameService.DataTransferObjects.GameMatchDto[] GetActiveMatches() {
            return base.Channel.GetActiveMatches();
        }
        
        public System.Threading.Tasks.Task<MemoryGame.MemoryGameService.DataTransferObjects.GameMatchDto[]> GetActiveMatchesAsync() {
            return base.Channel.GetActiveMatchesAsync();
        }
        
        public bool CanJoin(string matchHost) {
            return base.Channel.CanJoin(matchHost);
        }
        
        public System.Threading.Tasks.Task<bool> CanJoinAsync(string matchHost) {
            return base.Channel.CanJoinAsync(matchHost);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MemoryGameService.IMatchService", CallbackContract=typeof(MemoryGame.MemoryGameService.IMatchServiceCallback))]
    public interface IMatchService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/NotifyCardWasUncoveredd")]
        void NotifyCardWasUncoveredd(MemoryGame.MemoryGameService.DataTransferObjects.PlayerMovementDto playerMovementDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/NotifyCardWasUncoveredd")]
        System.Threading.Tasks.Task NotifyCardWasUncovereddAsync(MemoryGame.MemoryGameService.DataTransferObjects.PlayerMovementDto playerMovementDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/EnterMatch")]
        void EnterMatch(string host, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/EnterMatch")]
        System.Threading.Tasks.Task EnterMatchAsync(string host, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/PassTurnToNextPlayer")]
        void PassTurnToNextPlayer(string host, string username, MemoryGame.MemoryGameService.DataTransferObjects.CardPairDto cardPairDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/PassTurnToNextPlayer")]
        System.Threading.Tasks.Task PassTurnToNextPlayerAsync(string host, string username, MemoryGame.MemoryGameService.DataTransferObjects.CardPairDto cardPairDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/GetPlayersConnectedToMatch", ReplyAction="http://tempuri.org/IMatchService/GetPlayersConnectedToMatchResponse")]
        MemoryGame.MemoryGameService.DataTransferObjects.PlayerInMatchDto[] GetPlayersConnectedToMatch(string host);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/GetPlayersConnectedToMatch", ReplyAction="http://tempuri.org/IMatchService/GetPlayersConnectedToMatchResponse")]
        System.Threading.Tasks.Task<MemoryGame.MemoryGameService.DataTransferObjects.PlayerInMatchDto[]> GetPlayersConnectedToMatchAsync(string host);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/NotifyMatchHasEnded")]
        void NotifyMatchHasEnded(string host);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/NotifyMatchHasEnded")]
        System.Threading.Tasks.Task NotifyMatchHasEndedAsync(string host);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/UncoverCardd")]
        void UncoverCardd(int cardIndex);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/NotifyTurnHasBeenPassed")]
        void NotifyTurnHasBeenPassed(string username, MemoryGame.MemoryGameService.DataTransferObjects.CardPairDto cardPairDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/ShowWinners")]
        void ShowWinners(string winner);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchServiceChannel : MemoryGame.MemoryGameService.IMatchService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MatchServiceClient : System.ServiceModel.DuplexClientBase<MemoryGame.MemoryGameService.IMatchService>, MemoryGame.MemoryGameService.IMatchService {
        
        public MatchServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MatchServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MatchServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatchServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatchServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void NotifyCardWasUncoveredd(MemoryGame.MemoryGameService.DataTransferObjects.PlayerMovementDto playerMovementDto) {
            base.Channel.NotifyCardWasUncoveredd(playerMovementDto);
        }
        
        public System.Threading.Tasks.Task NotifyCardWasUncovereddAsync(MemoryGame.MemoryGameService.DataTransferObjects.PlayerMovementDto playerMovementDto) {
            return base.Channel.NotifyCardWasUncovereddAsync(playerMovementDto);
        }
        
        public void EnterMatch(string host, string username) {
            base.Channel.EnterMatch(host, username);
        }
        
        public System.Threading.Tasks.Task EnterMatchAsync(string host, string username) {
            return base.Channel.EnterMatchAsync(host, username);
        }
        
        public void PassTurnToNextPlayer(string host, string username, MemoryGame.MemoryGameService.DataTransferObjects.CardPairDto cardPairDto) {
            base.Channel.PassTurnToNextPlayer(host, username, cardPairDto);
        }
        
        public System.Threading.Tasks.Task PassTurnToNextPlayerAsync(string host, string username, MemoryGame.MemoryGameService.DataTransferObjects.CardPairDto cardPairDto) {
            return base.Channel.PassTurnToNextPlayerAsync(host, username, cardPairDto);
        }
        
        public MemoryGame.MemoryGameService.DataTransferObjects.PlayerInMatchDto[] GetPlayersConnectedToMatch(string host) {
            return base.Channel.GetPlayersConnectedToMatch(host);
        }
        
        public System.Threading.Tasks.Task<MemoryGame.MemoryGameService.DataTransferObjects.PlayerInMatchDto[]> GetPlayersConnectedToMatchAsync(string host) {
            return base.Channel.GetPlayersConnectedToMatchAsync(host);
        }
        
        public void NotifyMatchHasEnded(string host) {
            base.Channel.NotifyMatchHasEnded(host);
        }
        
        public System.Threading.Tasks.Task NotifyMatchHasEndedAsync(string host) {
            return base.Channel.NotifyMatchHasEndedAsync(host);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MemoryGameService.ITimerService", CallbackContract=typeof(MemoryGame.MemoryGameService.ITimerServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ITimerService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITimerService/UpdateTimer")]
        void UpdateTimer();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITimerService/UpdateTimer")]
        System.Threading.Tasks.Task UpdateTimerAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITimerServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITimerService/DisplayTimerValue")]
        void DisplayTimerValue(int timerValue);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITimerServiceChannel : MemoryGame.MemoryGameService.ITimerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TimerServiceClient : System.ServiceModel.DuplexClientBase<MemoryGame.MemoryGameService.ITimerService>, MemoryGame.MemoryGameService.ITimerService {
        
        public TimerServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TimerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TimerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TimerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TimerServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void UpdateTimer() {
            base.Channel.UpdateTimer();
        }
        
        public System.Threading.Tasks.Task UpdateTimerAsync() {
            return base.Channel.UpdateTimerAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MemoryGameService.ITokenGenerator")]
    public interface ITokenGenerator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenGenerator/GenerateToken", ReplyAction="http://tempuri.org/ITokenGenerator/GenerateTokenResponse")]
        string GenerateToken(int length);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenGenerator/GenerateToken", ReplyAction="http://tempuri.org/ITokenGenerator/GenerateTokenResponse")]
        System.Threading.Tasks.Task<string> GenerateTokenAsync(int length);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITokenGeneratorChannel : MemoryGame.MemoryGameService.ITokenGenerator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TokenGeneratorClient : System.ServiceModel.ClientBase<MemoryGame.MemoryGameService.ITokenGenerator>, MemoryGame.MemoryGameService.ITokenGenerator {
        
        public TokenGeneratorClient() {
        }
        
        public TokenGeneratorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TokenGeneratorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TokenGeneratorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TokenGeneratorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GenerateToken(int length) {
            return base.Channel.GenerateToken(length);
        }
        
        public System.Threading.Tasks.Task<string> GenerateTokenAsync(int length) {
            return base.Channel.GenerateTokenAsync(length);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MemoryGameService.IScoreService")]
    public interface IScoreService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreService/GetPlayersWithBestScore", ReplyAction="http://tempuri.org/IScoreService/GetPlayersWithBestScoreResponse")]
        MemoryGame.MemoryGameService.DataTransferObjects.PlayerScoreDTO[] GetPlayersWithBestScore(int numberOfPlayersToBeRetrieved);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreService/GetPlayersWithBestScore", ReplyAction="http://tempuri.org/IScoreService/GetPlayersWithBestScoreResponse")]
        System.Threading.Tasks.Task<MemoryGame.MemoryGameService.DataTransferObjects.PlayerScoreDTO[]> GetPlayersWithBestScoreAsync(int numberOfPlayersToBeRetrieved);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IScoreServiceChannel : MemoryGame.MemoryGameService.IScoreService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ScoreServiceClient : System.ServiceModel.ClientBase<MemoryGame.MemoryGameService.IScoreService>, MemoryGame.MemoryGameService.IScoreService {
        
        public ScoreServiceClient() {
        }
        
        public ScoreServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ScoreServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ScoreServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ScoreServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MemoryGame.MemoryGameService.DataTransferObjects.PlayerScoreDTO[] GetPlayersWithBestScore(int numberOfPlayersToBeRetrieved) {
            return base.Channel.GetPlayersWithBestScore(numberOfPlayersToBeRetrieved);
        }
        
        public System.Threading.Tasks.Task<MemoryGame.MemoryGameService.DataTransferObjects.PlayerScoreDTO[]> GetPlayersWithBestScoreAsync(int numberOfPlayersToBeRetrieved) {
            return base.Channel.GetPlayersWithBestScoreAsync(numberOfPlayersToBeRetrieved);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MemoryGameService.IPlayerRegistryService")]
    public interface IPlayerRegistryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerRegistryService/RegisterNewPlayer", ReplyAction="http://tempuri.org/IPlayerRegistryService/RegisterNewPlayerResponse")]
        bool RegisterNewPlayer(MemoryGame.MemoryGameService.DataTransferObjects.PlayerDTO playerDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerRegistryService/RegisterNewPlayer", ReplyAction="http://tempuri.org/IPlayerRegistryService/RegisterNewPlayerResponse")]
        System.Threading.Tasks.Task<bool> RegisterNewPlayerAsync(MemoryGame.MemoryGameService.DataTransferObjects.PlayerDTO playerDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerRegistryService/EmailAddressIsAvailable", ReplyAction="http://tempuri.org/IPlayerRegistryService/EmailAddressIsAvailableResponse")]
        bool EmailAddressIsAvailable(string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerRegistryService/EmailAddressIsAvailable", ReplyAction="http://tempuri.org/IPlayerRegistryService/EmailAddressIsAvailableResponse")]
        System.Threading.Tasks.Task<bool> EmailAddressIsAvailableAsync(string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerRegistryService/UserNameIsAvailable", ReplyAction="http://tempuri.org/IPlayerRegistryService/UserNameIsAvailableResponse")]
        bool UserNameIsAvailable(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerRegistryService/UserNameIsAvailable", ReplyAction="http://tempuri.org/IPlayerRegistryService/UserNameIsAvailableResponse")]
        System.Threading.Tasks.Task<bool> UserNameIsAvailableAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerRegistryServiceChannel : MemoryGame.MemoryGameService.IPlayerRegistryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerRegistryServiceClient : System.ServiceModel.ClientBase<MemoryGame.MemoryGameService.IPlayerRegistryService>, MemoryGame.MemoryGameService.IPlayerRegistryService {
        
        public PlayerRegistryServiceClient() {
        }
        
        public PlayerRegistryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlayerRegistryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerRegistryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerRegistryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool RegisterNewPlayer(MemoryGame.MemoryGameService.DataTransferObjects.PlayerDTO playerDTO) {
            return base.Channel.RegisterNewPlayer(playerDTO);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterNewPlayerAsync(MemoryGame.MemoryGameService.DataTransferObjects.PlayerDTO playerDTO) {
            return base.Channel.RegisterNewPlayerAsync(playerDTO);
        }
        
        public bool EmailAddressIsAvailable(string emailAddress) {
            return base.Channel.EmailAddressIsAvailable(emailAddress);
        }
        
        public System.Threading.Tasks.Task<bool> EmailAddressIsAvailableAsync(string emailAddress) {
            return base.Channel.EmailAddressIsAvailableAsync(emailAddress);
        }
        
        public bool UserNameIsAvailable(string username) {
            return base.Channel.UserNameIsAvailable(username);
        }
        
        public System.Threading.Tasks.Task<bool> UserNameIsAvailableAsync(string username) {
            return base.Channel.UserNameIsAvailableAsync(username);
        }
    }
}
